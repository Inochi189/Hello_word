friend = []
friend.append('Сережа')
friend.append('Кристина')
print(friend)

letter = ['a', 'b', 'c', 'd', 'e']
print(letter[0])    #Если фрагмент, который тебе нужен,
                    # включает в себя начало списка,

print(letter[1:4])  #Это сокращение выводит
                    #все элементы с начала списка вплоть до (но не включая) индекса,

print(letter[:4])   #Можно использовать нечто подобное,
                    # чтобы получить окончание списка:

print(letter[:])    #С помощью числа и последующего за ним двоеточия можно получить все эле-
                    # менты от индекса, указанного тобой, до конца списка.

letter[2] = 3       #Изменение элементов
print(letter)

# append() добавляет один элемент в конец списка;
# extend() добавляет несколько элементов в конец списка;
# insert() добавляет один элемент в любое место списка, необязательно
# в конец. Ты сам указываешь, куда его добавить.

letter.append('f')
print(letter)

letter.extend(['g', 'h', 'j'])
print(letter)

letter.insert(2, 's')
print((letter))

# Удаление с помощью функции remove(), Функция remove() удаляет элемент,
# выбранный тобой, из списка и «отбрасывает» его:
letter = ['a', 'b', 'c', 'd', 'e']
letter.remove('c')
print(letter, 'Удаление с помощью функции <remove()>')

# Удаление с помощью операции del
# Операция del позволяет удалять элемент из списка с помощью его индекса, на-
# пример:
letter = ['a', 'b', 'c', 'd', 'e']
del letter[3]
print(letter, 'Удаление с помощью операции <del>')

# Удаление с помощью операции pop
"""
Сейчас мы удалили вторую букву (индекс 1), то есть б. Удаленный элемент был
присвоен переменной second и удален из списка letters.
При отсутствии значения в скобках pop() отдает последний элемент и удаляет
его из списка. Если в скобки заключить число, pop(n) отдает элемент с этим ин-
дексом и удаляет его из списка.
"""
letter = ['a', 'b', 'c', 'd', 'e']
second = letter.pop(1)
print('second =', second)
print(letter, 'Удаление с помощью операции <pop>')

# Поиск по списку
# Чтобы узнать, есть ли элемент в списке, используется ключевое слово in, например:

if 'a' in letter:
    print("буква 'а' найдена")
else:
    print("буква 'а' не найдена")

# Определение индекса
# Чтобы найти местоположение элемента в списке, используй метод index(), например:
letter = ['a', 'b', 'c', 'd', 'e']
print(letter.index('c'))

if 'c' in letter:
    print(letter.index('c'))

print('*' * 20)
print('Зацикливание по списку')

# Зацикливание по списку
for letters in letter:
    print(letters)

print('*' * 20)

# Сортировка списка
# Функция sort() автоматически сортирует строки в алфавитном порядке, а чисkf
# в арифметическом, от самого маленького к самому большому.

letter = ['d', 'a', 'c', 'e', 'b']
print(letter)
letter.sort()
print(letter, 'sort')
letter.reverse()
print(letter, 'reverse')

letter = ['d', 'a', 'c', 'e', 'b']
letter.sort(reverse=True)
print(letter)

# Еще один способ сортировки – sorted()
# Есть еще один способ сортировать копию списка без изменения оригинального.
# В Python есть функция sorted() для этой цели. Она работает так:

original = [5, 2, 3, 1, 4]
newer = sorted(original)
print(original, 'оригинальный список')
print(newer, "копия отсортированного списка")

print('*' * 20)
